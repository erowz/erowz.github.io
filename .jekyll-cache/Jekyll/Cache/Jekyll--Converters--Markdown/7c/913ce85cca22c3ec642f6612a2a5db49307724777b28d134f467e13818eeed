I"`"<h1 id="함수function">함수(Function)</h1>
<ul>
  <li>입력(input)에 대해서 의도한 출력(output)을 전달</li>
</ul>

<h2 id="함수의-정의">함수의 정의</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="err">함수명(파라미터):
    실행문
    </span><span class="nf">return</span> <span class="err">결과값</span>
</code></pre></div></div>

<ul>
  <li>정의 시 최초에 def 키워드 사용</li>
  <li><code class="highlighter-rouge">:</code> (콜론) → 함수 역시 코드 블록이기 때문에 콜론(:) 필요</li>
  <li>body
    <ul>
      <li>함수의 구현 : 함수 역시 코드 블록이기 때문에 들여쓰기로 설정</li>
      <li><code class="highlighter-rouge">return 결과값</code> : 해당 함수를 실행한 결과값(output)을 함수를 호출한 코드(caller)로 전달해줌</li>
    </ul>
  </li>
</ul>

<h2 id="함수의-사용호출">함수의 사용(호출)</h2>
<ul>
  <li>함수명(파라미터1, 파라미터2, … 파라미터n)</li>
  <li>해당 함수의 이름과 parameter를 전달하여 호출 : 함수의 의도된 파라미터에 맞게 입력해야 함</li>
  <li>함수가 호출되면 실행의 흐름이 호출자(caller)에서 함수(callee)로 변경 됨</li>
  <li>함수의 입력(인풋) 파라미터(parameter), 아규먼트(argument)라고도 함</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 함수 정의
</span><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>

<span class="c1"># 함수 호출
</span><span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">300</span><span class="p">)</span>
<span class="o">&gt;&gt;</span> <span class="mi">330</span>
</code></pre></div></div>

<h1 id="함수의-특성">함수의 특성</h1>

<h2 id="naming">Naming</h2>
<ul>
  <li>누구든지 쉽게 이해할 수 있는 이름으로 네이밍</li>
  <li>eg. get_a(X) / get_student_name(O)</li>
</ul>

<h2 id="parameter">Parameter</h2>
<ul>
  <li>함수에 입력으로 전달하는 값(input)</li>
  <li>argument 라고도 함</li>
  <li>타입 명시가 없기 때문에 함수 생성 시 의도된 파라미터의 타입에 맞게 입력을 전달하는 것이 중요</li>
</ul>

<h3 id="default-parameter">Default parameter</h3>
<p>| 기본 파라미터</p>
<ul>
  <li>파라미터 기본값 지정 가능</li>
  <li>입력이 안될 경우 지정된 기본값으로 대체</li>
  <li>기본 파라미터 뒤에 일반 파라미터가 올 수 없으므로 맨 뒤에 사용할 것</li>
  <li>eg. print함수의 parameter : sep=’ ‘, end=’\n’</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="mi">5</span><span class="p">):</span>
    <span class="o">...</span>

<span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
    <span class="o">...</span>
</code></pre></div></div>

<h3 id="keyword-parameter">Keyword parameter</h3>
<ul>
  <li>함수 호출 시 파라미터를 지정해서 사용 가능</li>
  <li>함수 정의 시 지정된 파라미터의 순서는 무관</li>
  <li>기본 파라미터와 키워드 파라미터를 일관성있게 선택해서 사용하기를 권장</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'x:'</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="s">', y:'</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="s">'z:'</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span>

<span class="n">test</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
<span class="n">test</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">z</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>

<span class="o">&gt;&gt;</span> <span class="n">x</span><span class="p">:</span> <span class="mi">10</span> <span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="mi">20</span> <span class="n">z</span><span class="p">:</span> <span class="mi">30</span>
<span class="o">&gt;&gt;</span> <span class="n">x</span><span class="p">:</span> <span class="mi">10</span> <span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="mi">20</span> <span class="n">z</span><span class="p">:</span> <span class="mi">30</span>
</code></pre></div></div>

<h2 id="return">return</h2>

<h3 id="return-1">return</h3>
<ul>
  <li>기본적으로 함수의 종료를 의미
    <ul>
      <li><code class="highlighter-rouge">return 값</code> : 해당 값을 호출자(caller)에게 전달</li>
      <li><code class="highlighter-rouge">return</code> : None 반환</li>
      <li>없는 경우 : 함수 내 코드를 모두 실행한 후 종료하고 None 반환</li>
    </ul>
  </li>
</ul>

<h3 id="multiple-return">multiple return</h3>
<ul>
  <li>tuple로 여러 개의 값 반환 가능</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">add_mul</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
    <span class="n">m</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span>
    <span class="k">return</span> <span class="n">s</span><span class="p">,</span> <span class="n">m</span>

<span class="n">c</span> <span class="o">=</span> <span class="n">add_mul</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">c</span><span class="p">),</span> <span class="n">c</span><span class="p">)</span>

<span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">add_mul</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>

<span class="o">&gt;&gt;</span> <span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">tuple</span><span class="s">'&gt; (30, 200)</span><span class="err">
</span><span class="s">&gt;&gt; 30 200</span><span class="err">
</span></code></pre></div></div>

<h2 id="variable-scope-변수의-범위">variable scope (변수의 범위)</h2>
<p>변수가 참조 가능한 코드상의 범위를 명시
함수내의 변수는 자신이 속한 코드 블록이 종료되면 소멸됨
이렇게 특정 코드 블록에서 선언된 변수를 지역변수(local variable) 이라고 함
반대로 가장 상단에서 정의되어 프로그램 종료 전까지 유지되는 변수를 전역변수(global variable)이라고 함
같은 이름의 지역변수와 전역변수가 존재할 경우, 지역변수의 우선순위가 더 높음</p>
:ET